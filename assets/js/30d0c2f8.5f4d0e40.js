"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1727],{18607:e=>{e.exports=JSON.parse('{"url":"redocusaurus/using-single-yaml.yaml","themeId":"theme-redoc","isSpecFile":true,"spec":{"openapi":"3.0.0","info":{"description":"powered by Flasgger","title":"Github Copilot Extension","version":"0.0.1"},"paths":{"/logs":{"get":{"description":"Fetches all logged events from the database.","responses":{"200":{"description":"List of logs","content":{"*/*":{"schema":{"items":{"properties":{"data":{"example":{"user_id":12345},"type":"object"},"event":{"example":"user_login","type":"string"},"id":{"example":1,"type":"integer"},"timestamp":{"example":1708401940,"type":"number"}},"type":"object"},"type":"array"}}}},"500":{"description":"Internal server error"}},"summary":"Retrieve all logs in the database\\nSee Swagger docs for more information.","tags":["Logging"]},"post":{"description":"Logs the event to the database.","requestBody":{"content":{"application/json":{"schema":{"properties":{"event":{"example":"User logged in","type":"string"},"metadata":{"example":{"userID":12345},"type":"object"},"time_lapse":{"example":1708,"type":"number"}},"required":["event","timelapse","metadata"],"type":"object"}}},"required":true},"responses":{"200":{"description":"Event logged successfully","content":{"*/*":{"schema":{"properties":{"status":{"example":"logged","type":"string"}},"type":"object"}}}},"400":{"description":"Bad request or invalid input","content":{"*/*":{"schema":{"properties":{"message":{"example":"Missing required fields: event, text","type":"string"},"status":{"example":"error","type":"string"}},"type":"object"}}}},"500":{"description":"Internal server error"}},"summary":"Logs the event to the database.\\nSee Swagger docs for more information.","tags":["Logging"]}},"/logs/{user_id}":{"get":{"description":"Fetches all logged events associated with a specific user ID.","parameters":[{"description":"The ID of the user whose logs are being retrieved.","example":12345,"in":"path","name":"user_id","required":true,"schema":{"type":"integer"}}],"responses":{"200":{"description":"List of logs for the specified user","content":{"*/*":{"schema":{"items":{"properties":{"data":{"example":{"user_id":12345},"type":"object"},"event":{"example":"user_login","type":"string"},"id":{"example":1,"type":"integer"},"timestamp":{"example":1708401940,"type":"number"}},"type":"object"},"type":"array"}}}},"404":{"description":"No logs found for the specified user"},"500":{"description":"Internal server error"}},"summary":"Get all logs for a specific user\\nSee Swagger docs for more information.","tags":["Logging"]}},"/suggestion":{"post":{"description":"Sends a prompt to the locally running Ollama model with an optional model name and correctness flag, returning the generated suggestion.","requestBody":{"content":{"application/json":{"schema":{"properties":{"isCorrect":{"description":"A flag indicating whether the suggestion should be correct.","example":false,"type":"boolean"},"model":{"description":"The AI model to use for generating the suggestion.","example":"llama3.2:latest","type":"string"},"prompt":{"example":"def add(a, b):","type":"string"}},"required":["prompt"],"type":"object"}}},"required":true},"responses":{"200":{"description":"Successfully generated suggestion","content":{"application/json":{"schema":{"properties":{"suggestions":{"example":["return a + b"],"items":{"type":"string"},"type":"array"}},"type":"object"}}}},"400":{"description":"Bad Request - No prompt provided","content":{"application/json":{"schema":{"properties":{"error":{"example":"No prompt provided","type":"string"}},"type":"object"}}}},"500":{"description":"Internal Server Error - Failed to generate response","content":{"application/json":{"schema":{"properties":{"error":{"example":"Connection error","type":"string"}},"type":"object"}}}}},"summary":"Generate a suggestion based on the provided prompt.\\nSee Swagger docs for more information.","tags":["Suggestions"]}},"/users":{"post":{"description":"Registers a new user with first name, last name, email, and password.","requestBody":{"content":{"application/json":{"schema":{"properties":{"email":{"example":"jaime@example.com","type":"string"},"first_name":{"example":"Jaime","type":"string"},"last_name":{"example":"Nguyen","type":"string"},"password":{"example":"password123","type":"string"}},"required":["first_name","last_name","email","password"],"type":"object"}}},"required":true},"responses":{"201":{"description":"User created successfully","content":{"*/*":{"schema":{"properties":{"email":{"type":"string"},"first_name":{"type":"string"},"id":{"type":"string"},"last_name":{"type":"string"}},"type":"object"}}}},"400":{"description":"Bad request (missing fields or email already exists)","content":{"*/*":{"schema":{"properties":{"error":{"type":"string"}},"type":"object"}}}},"500":{"description":"Internal server error","content":{"*/*":{"schema":{"properties":{"error":{"type":"string"}},"type":"object"}}}}},"summary":"Create a new user with first name, last name, email, and password.","tags":["Users"]}},"/users/{user_id}":{"get":{"description":"Retrieves user details based on the provided user ID.","parameters":[{"example":"123","in":"path","name":"user_id","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"User found successfully","content":{"*/*":{"schema":{"properties":{"email":{"type":"string"},"id":{"type":"string"},"name":{"type":"string"}},"type":"object"}}}},"404":{"description":"User not found","content":{"*/*":{"schema":{"properties":{"error":{"type":"string"}},"type":"object"}}}}},"summary":"TODO Get a specific user by ID","tags":["Users"]}}}}}')}}]);